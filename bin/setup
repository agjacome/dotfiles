#!/usr/bin/env bash
set -euo pipefail

declare -r remote="https://github.com/agjacome/dotfiles.git"
declare -r local="$HOME/.dotfiles"
declare -r lock="${XDG_CACHE_HOME:-$HOME/.cache}/dotfiles.setup"

function main() {
    if [[ -f ${lock} ]]; then
        echo "Setup already ran, skipping. To run again, delete ${lock}"
        exit 0
    fi

    echo "Setting up nix..."
    setup_nix
    echo

    echo "Cloning dotfiles repo..."
    clone_repository
    echo

    echo "Setting up home-manager..."
    setup_home_manager
    echo

    echo "Setting up chezmoi..."
    setup_chezmoi
    echo

    echo "Setting up fish..."
    setup_fish
    echo

    echo "Importing GPG keys..."
    import_gpg_keys
    echo

    mkdir -p $(dirname ${lock})
    touch ${lock}

    echo "Setup complete!"
}

function setup_nix() {
    if command -v nix &> /dev/null; then
        return
    fi

    ensure_installed curl xz

    curl -L https://nixos.org/nix/install | sh -s -- --daemon

    export PATH="$HOME/.nix-profile/bin:$PATH"
    nix-channel --add https://nixos.org/channels/nixpkgs-unstable
    nix-channel --update
}

function clone_repository() {
    if [[ -d ${local} ]]; then
        return
    fi

    nix-shell -p git --run "git clone ${remote} ${local}"
}

function setup_home_manager() {
    nix-shell ${local}/shell.nix --run "home-manager switch --flake ${local}"
}

function setup_chezmoi() {
    chezmoi init  -S ${local}
    chezmoi apply -S ${local} --exclude externals
    chezmoi apply -S ${local} --include externals
}

function setup_fish() {
    if ! grep -q $(which fish) /etc/shells; then
        echo $(which fish) | sudo tee -a /etc/shells
    fi

    chsh -s $(which fish)
    fish -c "fisher update"
}

function import_gpg_keys() {
    gpg --batch --import $HOME/.gnupg/private_keys.pgp
}

function ensure_installed() {
    local -r packages=($@)

    for package in ${packages[@]}; do
        if ! command -v ${package} &> /dev/null; then
            echo "Missing dependency: ${package}"
            exit 1
        fi
    done
}

main $@
